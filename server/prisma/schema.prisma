generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  cashier
  manager
}

model User {
  id             Int          @id @default(autoincrement())
  name           String
  email          String       @unique
  password       String
  role           Role         @default(cashier)
  isSuperAdmin   Boolean      @default(false)
  createdAt      DateTime     @default(now())
  transactions   Transaction[]
  logs           Log[]
  productsCreated Product[]   @relation("UserCreatedProducts")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id                  Int                 @id @default(autoincrement())
  name                String
  price               Int
  stock               Int
  createdAt           DateTime            @default(now())
  categoryId          Int
  category            Category            @relation(fields: [categoryId], references: [id])
  transactionDetails  TransactionDetail[]
  createdById         Int?
  createdBy           User?               @relation("UserCreatedProducts", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([name]) // For product search
  @@index([categoryId]) // For filtering by category
  @@index([createdAt]) // For sorting/filtering by date
}

model Customer {
  id          Int           @id @default(autoincrement())
  name        String
  phone       String?
  transactions Transaction[]

  @@index([phone]) // For customer lookup by phone
  @@index([name]) // For customer search by name
}


model Transaction {
  id          Int               @id @default(autoincrement())
  total       Int
  createdAt   DateTime          @default(now())
  userId      Int
  customerId  Int?
  user        User              @relation(fields: [userId], references: [id])
  customer    Customer?         @relation(fields: [customerId], references: [id])
  details     TransactionDetail[]

  @@index([createdAt]) // Critical for reports & date filtering
  @@index([userId]) // For user transaction history
  @@index([customerId]) // For customer transaction history
}

model TransactionDetail {
  id            Int         @id @default(autoincrement())
  quantity      Int
  subTotal      Int
  transactionId Int
  productId     Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id])

  @@index([productId]) // For top products aggregation
  @@index([transactionId]) // For transaction details lookup
}

model Log {
  id        Int      @id @default(autoincrement())
  action    String
  entity    String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@index([createdAt]) // For log filtering & sorting
  @@index([userId]) // For user activity tracking
  @@index([action]) // For filtering by action type
}
